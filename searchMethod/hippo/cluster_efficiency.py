import os
import cv2
import time
import torch
import random
import pickle
import warnings
import numpy as np
import pandas as pd
from tqdm import tqdm
from loguru import logger

from ultralytics import YOLO
from ultralytics.utils.checks import check_yaml
from ultralytics.utils import IterableSimpleNamespace, yaml_load

import utils
from config_ import generate_random_config
from trackers.byte_tracker import BYTETracker
from cameraclass import build_a_camera_with_config
from rec_configs import extract_context_vector_by_skyscraper

warnings.filterwarnings("ignore")
seed = 2024
random.seed(seed)
np.random.seed(seed)

def calculate_context_distance(c1, c2, normalize=True):
    if normalize:
        c1 = c1 / np.linalg.norm(c1)
        c2 = c2 / np.linalg.norm(c2)
    return np.linalg.norm(c1 - c2)

def is_dominated(x, y):
    return all(x[i] <= y[i] for i in range(2)) and any(x[i] < y[i] for i in range(2))

def identify_pareto(solutions):
    pareto_front = []
    for solution in solutions:
        if not any(is_dominated(solution, other) for other in solutions):
            if ",".join([str(int(res)) for res in solution[-1]]) not in [",".join([str(int(res)) for res in pareto[-1]]) for pareto in pareto_front]:
                pareto_front.append(solution)
    return pareto_front

def collocate_pareto_set(video_id, camera_type="train", cache_dir="./cache/global/one_camera_with_config"):
    ingestion_result_path_name_list = os.listdir(cache_dir)
    filtered_ingestion_result_path_name_list = [
        path_name for path_name in ingestion_result_path_name_list if f"{camera_type}_{video_id}" in path_name]
    result_sets = []
    for ingestion_result_path_name in filtered_ingestion_result_path_name_list:
        ingestion_result_path = os.path.join(
            cache_dir, ingestion_result_path_name)
        with open(ingestion_result_path, "rb") as f:
            ingestion_result = pickle.load(f)
            cache_info = ingestion_result_path_name.rstrip(".pkl").split("_")[
                1:]
            video_id, config_vector = int(cache_info[0]), cache_info[1:]
            config_vector = [int(res) for res in config_vector]
            _, ingestionvalue, _, _, _, cmetric, _ = ingestion_result
            result_sets.append(
                [ingestionvalue, cmetric[-1], config_vector])
    pareto_set = identify_pareto(result_sets)
    pareto_set = sorted(pareto_set, key=lambda x: x[0])
    return pareto_set

if __name__ == "__main__":
    save_log_path = "./efficiency.log"
    save_context_vectors_dir = "./result/cluster_efficiency"
    logger.add(save_log_path, rotation="10 MB")
    logger.info("Start to collocate pareto set.")
    device_id = 1
    data_type = "train"
    data_name = "hippo"
    scene_name = "hippo"
    skyscraper_config_set_size = 2
    objects, metrics = ["car", "bus", "truck"], ["sel", "agg", "cq3"] # "topk", "csel", "cagg", "ctopk", "cq1", "cq2",
    envconfigpath = "./cache/base.yaml"
    dataset_dir = "/home/lzp/otif-dataset/dataset"
    envcachepath = "./cache/test_skyscraper_cluster.yaml"
    method_name = "test_skyscraper_cluster"
    define_video_list = {100: [4, 8, 11, 14, 16, 17, 18, 30, 32, 33, 44, 45, 46, 50, 54, 58, 65, 67, 73, 74, 75, 85, 86, 88, 91, 92, 117, 118, 120, 122, 123, 127, 136, 139, 140, 142, 146, 149, 150, 151, 153, 156, 157, 158, 167, 176, 178, 187, 190, 196, 201, 208, 211, 219, 222, 223, 225, 233, 234, 238, 244, 246, 251, 255, 267, 273, 276, 282, 283, 285, 286, 287, 292, 295, 298, 308, 317, 319, 320, 323, 324, 328, 329, 331, 332, 344, 345, 348, 352, 355, 363, 367, 386, 389, 390, 393, 394, 395, 396, 399],
                         109: [3, 4, 8, 11, 14, 16, 17, 18, 30, 32, 33, 44, 45, 46, 50, 54, 58, 62, 65, 67, 73, 74, 75, 85, 86, 88, 91, 92, 104, 117, 118, 120, 122, 123, 127, 136, 139, 140, 142, 146, 149, 150, 151, 153, 156, 157, 158, 167, 170, 176, 178, 187, 189, 190, 196, 201, 208, 211, 219, 222, 223, 225, 233, 234, 237, 238, 244, 246, 251, 255, 267, 273, 276, 282, 283, 285, 286, 287, 292, 295, 298, 299, 308, 317, 319, 320, 323, 324, 328, 329, 331, 332, 344, 345, 348, 349, 352, 355, 363, 367, 375, 386, 389, 390, 393, 394, 395, 396, 399], 118: [3, 4, 8, 11, 14, 16, 17, 18, 30, 32, 33, 38, 44, 45, 46, 50, 54, 58, 62, 65, 67, 73, 74, 75, 85, 86, 88, 90, 91, 92, 104, 117, 118, 120, 122, 123, 126, 127, 136, 139, 140, 142, 146, 149, 150, 151, 153, 156, 157, 158, 161, 167, 170, 176, 178, 187, 189, 190, 196, 201, 206, 208, 211, 219, 222, 223, 225, 233, 234, 237, 238, 244, 246, 251, 255, 259, 267, 273, 276, 279, 282, 283, 285, 286, 287, 292, 295, 298, 299, 301, 308, 317, 319, 320, 323, 324, 328, 329, 331, 332, 344, 345, 348, 349, 352, 355, 363, 367, 372, 375, 386, 389, 390, 393, 394, 395, 396, 399], 125: [3, 4, 8, 11, 14, 16, 17, 18, 30, 32, 33, 36, 38, 44, 45, 46, 50, 54, 55, 58, 62, 65, 67, 73, 74, 75, 85, 86, 88, 90, 91, 92, 104, 117, 118, 120, 122, 123, 126, 127, 136, 139, 140, 142, 146, 147, 149, 150, 151, 153, 156, 157, 158, 161, 167, 170, 176, 178, 182, 187, 189, 190, 196, 201, 206, 208, 211, 219, 222, 223, 225, 227, 233, 234, 237, 238, 244, 246, 251, 255, 259, 267, 273, 276, 277, 279, 282, 283, 285, 286, 287, 292, 295, 298, 299, 301, 303, 308, 317, 319, 320, 323, 324, 328, 329, 331, 332, 344, 345, 348, 349, 352, 355, 363, 367, 372, 375, 386, 389, 390, 393, 394, 395, 396, 399], 127: [3, 4, 8, 11, 14, 16, 17, 18, 30, 32, 33, 36, 38, 44, 45, 46, 50, 54, 55, 58, 61, 62, 65, 67, 73, 74, 75, 85, 86, 88, 90, 91, 92, 104, 117, 118, 120, 122, 123, 126, 127, 136, 139, 140, 142, 146, 147, 149, 150, 151, 153, 156, 157, 158, 161, 167, 170, 176, 178, 182, 187, 189, 190, 196, 201, 206, 208, 211, 213, 219, 222, 223, 225, 227, 233, 234, 237, 238, 244, 246, 251, 255, 259, 267, 273, 276, 277, 279, 282, 283, 285, 286, 287, 292, 295, 298, 299, 301, 303, 308, 317, 319, 320, 323, 324, 328, 329, 331, 332, 344, 345, 348, 349, 352, 355, 363, 367, 372, 375, 386, 389, 390, 393, 394, 395, 396, 399], 136: [3, 4, 8, 11, 14, 16, 17, 18, 27, 30, 32, 33, 36, 38, 44, 45, 46, 50, 54, 55, 58, 61, 62, 65, 67, 73, 74, 75, 85, 86, 87, 88, 90, 91, 92, 104, 106, 117, 118, 120, 122, 123, 126, 127, 136, 139, 140, 142, 146, 147, 149, 150, 151, 153, 156, 157, 158, 161, 167, 170, 176, 178, 182, 184, 187, 189, 190, 196, 201, 206, 208, 211, 213, 219, 222, 223, 225, 226, 227, 233, 234, 237, 238, 244, 246, 251, 253, 255, 259, 267, 273, 276, 277, 279, 282, 283, 285, 286, 287, 292, 293, 295, 298, 299, 301, 303, 308, 317, 319, 320, 323, 324, 328, 329, 331, 332, 336, 344, 345, 348, 349, 352, 355, 356, 363, 367, 372, 375, 386, 389, 390, 393, 394, 395, 396, 399], 145: [3, 4, 8, 11, 14, 16, 17, 18, 27, 30, 32, 33, 36, 38, 41, 42, 44, 45, 46, 50, 53, 54, 55, 58, 61, 62, 65, 67, 73, 74, 75, 85, 86, 87, 88, 90, 91, 92, 103, 104, 106, 117, 118, 120, 122, 123, 126, 127, 136, 139, 140, 142, 146, 147, 149, 150, 151, 153, 156, 157, 158, 161, 167, 170, 176, 178, 182, 184, 187, 189, 190, 196, 199, 201, 204, 206, 208, 211, 213, 219, 222, 223, 225, 226, 227, 233, 234, 237, 238, 244, 246, 251, 253, 255, 258, 259, 267, 273, 276, 277, 279, 282, 283, 285, 286, 287, 292, 293, 295, 298, 299, 301, 303, 308, 317, 319, 320, 323, 324, 328, 329, 331, 332, 333, 336, 344, 345, 348, 349, 352, 355, 356, 363, 367, 372, 375, 376, 386, 389, 390, 393, 394, 395, 396, 399], 150: [3, 4, 8, 11, 14, 16, 17, 18, 22, 27, 30, 32, 33, 36, 38, 41, 42, 44, 45, 46, 50, 53, 54, 55, 58, 61, 62, 65, 67, 73, 74, 75, 85, 86, 87, 88, 90, 91, 92, 103, 104, 105, 106, 117, 118, 120, 122, 123, 126, 127, 136, 139, 140, 142, 146, 147, 149, 150, 151, 153, 156, 157, 158, 161, 167, 170, 176, 178, 182, 184, 187, 189, 190, 196, 199, 201, 204, 206, 208, 211, 213, 219, 222, 223, 225, 226, 227, 233, 234, 237, 238, 244, 246, 247, 251, 253, 255, 258, 259, 267, 273, 276, 277, 279, 282, 283, 285, 286, 287, 292, 293, 295, 298, 299, 301, 303, 308, 310, 317, 319, 320, 323, 324, 328, 329, 331, 332, 333, 336, 344, 345, 348, 349, 352, 355, 356, 363, 367, 372, 375, 376, 386, 389, 390, 391, 393, 394, 395, 396, 399], 159: [3, 4, 8, 11, 14, 16, 17, 18, 22, 27, 30, 31, 32, 33, 36, 38, 41, 42, 44, 45, 46, 50, 53, 54, 55, 58, 61, 62, 65, 67, 73, 74, 75, 81, 85, 86, 87, 88, 90, 91, 92, 103, 104, 105, 106, 117, 118, 120, 122, 123, 126, 127, 129, 136, 139, 140, 142, 146, 147, 149, 150, 151, 153, 155, 156, 157, 158, 161, 167, 170, 176, 178, 182, 184, 187, 189, 190, 196, 199, 201, 204, 206, 208, 210, 211, 213, 219, 222, 223, 225, 226, 227, 233, 234, 237, 238, 244, 246, 247, 251, 252, 253, 255, 258, 259, 267, 273, 276, 277, 279, 282, 283, 285, 286, 287, 292, 293, 295, 298, 299, 301, 303, 308, 310, 317, 319, 320, 323, 324, 328, 329, 331, 332, 333, 336, 342, 344, 345, 348, 349, 352, 355, 356, 361, 363, 367, 370, 372, 375, 376, 386, 389, 390, 391, 393, 394, 395, 396, 399], 168: [1, 3, 4, 8, 11, 14, 16, 17, 18, 22, 27, 30, 31, 32, 33, 36, 38, 41, 42, 44, 45, 46, 50, 53, 54, 55, 58, 61, 62, 65, 67, 68, 73, 74, 75, 81, 85, 86, 87, 88, 90, 91, 92, 103, 104, 105, 106, 117, 118, 120, 122, 123, 126, 127, 129, 136, 139, 140, 142, 145, 146, 147, 149, 150, 151, 153, 155, 156, 157, 158, 161, 167, 169, 170, 176, 178, 182, 184, 187, 189, 190, 196, 199, 201, 204, 206, 208, 210, 211, 213, 219, 222, 223, 225, 226, 227, 233, 234, 237, 238, 242, 244, 246, 247, 249, 251, 252, 253, 255, 258, 259, 267, 273, 276, 277, 279, 282, 283, 285, 286, 287, 288, 292, 293, 295, 298, 299, 301, 303, 308, 310, 317, 319, 320, 323, 324, 328, 329, 331, 332, 333, 336, 337, 342, 344, 345, 348, 349, 352, 355, 356, 361, 363, 367, 370, 372, 375, 376, 386, 389, 390, 391, 392, 393, 394, 395, 396, 399], 175: [1, 3, 4, 8, 11, 14, 16, 17, 18, 19, 22, 27, 30, 31, 32, 33, 36, 38, 41, 42, 44, 45, 46, 50, 53, 54, 55, 58, 61, 62, 65, 67, 68, 73, 74, 75, 77, 81, 85, 86, 87, 88, 90, 91, 92, 103, 104, 105, 106, 109, 117, 118, 120, 122, 123, 126, 127, 129, 136, 139, 140, 142, 145, 146, 147, 149, 150, 151, 153, 155, 156, 157, 158, 161, 167, 169, 170, 175, 176, 178, 182, 184, 187, 189, 190, 196, 199, 201, 204, 206, 208, 210, 211, 213, 219, 222, 223, 225, 226, 227, 232, 233, 234, 237, 238, 242, 244, 246, 247, 249, 251, 252, 253, 255, 258, 259, 267, 273, 276, 277, 279, 282, 283, 285, 286, 287, 288, 292, 293, 294, 295, 298, 299, 301, 303, 308, 310, 317, 319, 320, 323, 324, 328, 329, 331, 332, 333, 336, 337, 342, 344, 345, 346, 348, 349, 352, 355, 356, 361, 363, 367, 370, 372, 375, 376, 386, 389, 390, 391, 392, 393, 394, 395, 396, 399], 177: [1, 3, 4, 8, 11, 14, 16, 17, 18, 19, 20, 22, 27, 30, 31, 32, 33, 36, 38, 41, 42, 44, 45, 46, 50, 53, 54, 55, 58, 61, 62, 65, 67, 68, 73, 74, 75, 77, 81, 85, 86, 87, 88, 90, 91, 92, 103, 104, 105, 106, 109, 117, 118, 120, 122, 123, 126, 127, 129, 136, 139, 140, 142, 145, 146, 147, 149, 150, 151, 153, 155, 156, 157, 158, 161, 167, 169, 170, 175, 176, 178, 182, 184, 187, 189, 190, 196, 199, 201, 204, 206, 208, 210, 211, 213, 219, 222, 223, 225, 226, 227, 232, 233, 234, 237, 238, 242, 244, 246, 247, 249, 251, 252, 253, 255, 258, 259, 266, 267, 273, 276, 277, 279, 282, 283, 285, 286, 287, 288, 292, 293, 294, 295, 298, 299, 301, 303, 308, 310, 317, 319, 320, 323, 324, 328, 329, 331, 332, 333, 336, 337, 342, 344, 345, 346, 348, 349, 352, 355, 356, 361, 363, 367, 370, 372, 375, 376, 386, 389, 390, 391, 392, 393, 394, 395, 396, 399], 186: [1, 3, 4, 8, 11, 14, 16, 17, 18, 19, 20, 22, 27, 29, 30, 31, 32, 33, 36, 38, 41, 42, 44, 45, 46, 50, 53, 54, 55, 58, 61, 62, 65, 67, 68, 73, 74, 75, 76, 77, 81, 85, 86, 87, 88, 90, 91, 92, 103, 104, 105, 106, 109, 117, 118, 120, 122, 123, 126, 127, 129, 136, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 161, 167, 169, 170, 175, 176, 178, 182, 184, 187, 189, 190, 196, 199, 201, 204, 206, 208, 210, 211, 213, 219, 222, 223, 225, 226, 227, 232, 233, 234, 237, 238, 241, 242, 244, 246, 247, 249, 250, 251, 252, 253, 255, 258, 259, 263, 266, 267, 273, 276, 277, 279, 282, 283, 285, 286, 287, 288, 292, 293, 294, 295, 298, 299, 301, 303, 305, 308, 310, 317, 319, 320, 323, 324, 328, 329, 331, 332, 333, 336, 337, 342, 344, 345, 346, 348, 349, 352, 355, 356, 361, 363, 365, 367, 370, 372, 375, 376, 386, 389, 390, 391, 392, 393, 394, 395, 396, 399], 195: [1, 3, 4, 8, 11, 14, 16, 17, 18, 19, 20, 21, 22, 27, 29, 30, 31, 32, 33, 36, 38, 41, 42, 44, 45, 46, 50, 53, 54, 55, 58, 61, 62, 65, 67, 68, 73, 74, 75, 76, 77, 81, 85, 86, 87, 88, 90, 91, 92, 97, 102, 103, 104, 105, 106, 109, 117, 118, 120, 122, 123, 126, 127, 129, 136, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 161, 167, 169, 170, 175, 176, 178, 182, 183, 184, 187, 189, 190, 196, 199, 201, 204, 206, 208, 210, 211, 213, 215, 219, 221, 222, 223, 225, 226, 227, 232, 233, 234, 237, 238, 241, 242, 244, 246, 247, 249, 250, 251, 252, 253, 255, 258, 259, 263, 266, 267, 268, 273, 276, 277, 279, 282, 283, 285, 286, 287, 288, 292, 293, 294, 295, 298, 299, 300, 301, 303, 305, 308, 310, 317, 319, 320, 323, 324, 328, 329, 331, 332, 333, 336, 337, 342, 344, 345, 346, 348, 349, 352, 355, 356, 361, 363, 365, 367, 370, 372, 375, 376, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399], 200: [1, 2, 3, 4, 8, 11, 14, 16, 17, 18, 19, 20, 21, 22, 27, 29, 30, 31, 32, 33, 36, 38, 41, 42, 44, 45, 46, 50, 53, 54, 55, 56, 58, 61, 62, 65, 67, 68, 73, 74, 75, 76, 77, 81, 85, 86, 87, 88, 90, 91, 92, 97, 102, 103, 104, 105, 106, 109, 117, 118, 120, 122, 123, 126, 127, 129, 133, 136, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 161, 167, 169, 170, 175, 176, 178, 182, 183, 184, 187, 189, 190, 196, 199, 201, 204, 206, 208, 210, 211, 213, 215, 219, 221, 222, 223, 225, 226, 227, 232, 233, 234, 237, 238, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 255, 258, 259, 263, 266, 267, 268, 273, 276, 277, 279, 282, 283, 285, 286, 287, 288, 292, 293, 294, 295, 298, 299, 300, 301, 303, 305, 308, 310, 317, 319, 320, 323, 324, 328, 329, 331, 332, 333, 336, 337, 342, 344, 345, 346, 348, 349, 352, 355, 356, 361, 363, 365, 367, 370, 372, 375, 376, 378, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399], 209: [1, 2, 3, 4, 8, 11, 14, 16, 17, 18, 19, 20, 21, 22, 27, 29, 30, 31, 32, 33, 35, 36, 38, 41, 42, 44, 45, 46, 50, 53, 54, 55, 56, 58, 61, 62, 65, 67, 68, 73, 74, 75, 76, 77, 78, 81, 85, 86, 87, 88, 90, 91, 92, 97, 102, 103, 104, 105, 106, 108, 109, 117, 118, 120, 122, 123, 126, 127, 129, 133, 136, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 161, 163, 167, 169, 170, 175, 176, 178, 182, 183, 184, 187, 189, 190, 196, 199, 201, 202, 204, 206, 208, 210, 211, 213, 215, 219, 221, 222, 223, 225, 226, 227, 232, 233, 234, 237, 238, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 255, 256, 258, 259, 263, 266, 267, 268, 273, 276, 277, 279, 282, 283, 285, 286, 287, 288, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 305, 306, 308, 310, 317, 319, 320, 323, 324, 328, 329, 331, 332, 333, 336, 337, 342, 344, 345, 346, 348, 349, 352, 355, 356, 361, 363, 365, 367, 368, 370, 372, 375, 376, 378, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399], 218: [1, 2, 3, 4, 8, 11, 14, 16, 17, 18, 19, 20, 21, 22, 27, 29, 30, 31, 32, 33, 35, 36, 38, 39, 41, 42, 44, 45, 46, 50, 53, 54, 55, 56, 58, 61, 62, 65, 67, 68, 71, 73, 74, 75, 76, 77, 78, 81, 85, 86, 87, 88, 90, 91, 92, 97, 100, 102, 103, 104, 105, 106, 108, 109, 117, 118, 120, 122, 123, 126, 127, 128, 129, 133, 136, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 161, 163, 167, 169, 170, 175, 176, 178, 182, 183, 184, 187, 189, 190, 192, 196, 199, 201, 202, 204, 206, 208, 210, 211, 213, 215, 219, 221, 222, 223, 225, 226, 227, 232, 233, 234, 237, 238, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 263, 266, 267, 268, 273, 276, 277, 279, 281, 282, 283, 285, 286, 287, 288, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 305, 306, 308, 310, 317, 319, 320, 323, 324, 326, 328, 329, 331, 332, 333, 336, 337, 342, 344, 345, 346, 348, 349, 352, 355, 356, 361, 363, 365, 367, 368, 370, 372, 375, 376, 378, 380, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399], 225: [1, 2, 3, 4, 8, 11, 14, 16, 17, 18, 19, 20, 21, 22, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 44, 45, 46, 50, 53, 54, 55, 56, 58, 61, 62, 65, 67, 68, 71, 73, 74, 75, 76, 77, 78, 81, 85, 86, 87, 88, 90, 91, 92, 97, 100, 102, 103, 104, 105, 106, 108, 109, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 133, 136, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 161, 163, 167, 169, 170, 175, 176, 178, 182, 183, 184, 185, 187, 189, 190, 192, 196, 199, 201, 202, 204, 206, 208, 210, 211, 213, 215, 219, 221, 222, 223, 225, 226, 227, 232, 233, 234, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 263, 266, 267, 268, 273, 274, 276, 277, 279, 281, 282, 283, 285, 286, 287, 288, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 305, 306, 308, 310, 317, 319, 320, 323, 324, 326, 327, 328, 329, 331, 332, 333, 336, 337, 342, 344, 345, 346, 348, 349, 352, 355, 356, 361, 363, 365, 367, 368, 370, 371, 372, 375, 376, 378, 380, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399], 227: [1, 2, 3, 4, 8, 11, 14, 16, 17, 18, 19, 20, 21, 22, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 44, 45, 46, 50, 53, 54, 55, 56, 58, 61, 62, 65, 67, 68, 71, 73, 74, 75, 76, 77, 78, 81, 83, 85, 86, 87, 88, 90, 91, 92, 97, 100, 102, 103, 104, 105, 106, 108, 109, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 133, 136, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 161, 163, 167, 169, 170, 175, 176, 178, 182, 183, 184, 185, 187, 189, 190, 192, 195, 196, 199, 201, 202, 204, 206, 208, 210, 211, 213, 215, 219, 221, 222, 223, 225, 226, 227, 232, 233, 234, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 263, 266, 267, 268, 273, 274, 276, 277, 279, 281, 282, 283, 285, 286, 287, 288, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 305, 306, 308, 310, 317, 319, 320, 323, 324, 326, 327, 328, 329, 331, 332, 333, 336, 337, 342, 344, 345, 346, 348, 349, 352, 355, 356, 361, 363, 365, 367, 368, 370, 371, 372, 375, 376, 378, 380, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399], 236: [0, 1, 2, 3, 4, 8, 11, 14, 16, 17, 18, 19, 20, 21, 22, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 44, 45, 46, 50, 53, 54, 55, 56, 58, 61, 62, 65, 67, 68, 71, 73, 74, 75, 76, 77, 78, 81, 83, 85, 86, 87, 88, 90, 91, 92, 95, 97, 100, 102, 103, 104, 105, 106, 108, 109, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 133, 135, 136, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 161, 163, 167, 169, 170, 175, 176, 178, 182, 183, 184, 185, 187, 188, 189, 190, 192, 195, 196, 199, 201, 202, 204, 206, 208, 210, 211, 213, 214, 215, 219, 221, 222, 223, 225, 226, 227, 232, 233, 234, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 263, 266, 267, 268, 273, 274, 276, 277, 279, 280, 281, 282, 283, 285, 286, 287, 288, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 308, 310, 317, 319, 320, 323, 324, 326, 327, 328, 329, 331, 332, 333, 336, 337, 342, 344, 345, 346, 348, 349, 352, 353, 355, 356, 361, 363, 365, 367, 368, 370, 371, 372, 375, 376, 377, 378, 380, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399], 245: [0, 1, 2, 3, 4, 8, 11, 14, 16, 17, 18, 19, 20, 21, 22, 23, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 44, 45, 46, 50, 53, 54, 55, 56, 58, 61, 62, 65, 67, 68, 71, 73, 74, 75, 76, 77, 78, 81, 83, 85, 86, 87, 88, 90, 91, 92, 95, 97, 98, 100, 102, 103, 104, 105, 106, 108, 109, 110, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 133, 135, 136, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 167, 169, 170, 175, 176, 178, 182, 183, 184, 185, 187, 188, 189, 190, 192, 195, 196, 199, 201, 202, 204, 206, 208, 209, 210, 211, 213, 214, 215, 219, 221, 222, 223, 225, 226, 227, 232, 233, 234, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 262, 263, 266, 267, 268, 273, 274, 276, 277, 279, 280, 281, 282, 283, 285, 286, 287, 288, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 317, 319, 320, 323, 324, 326, 327, 328, 329, 331, 332, 333, 336, 337, 342, 344, 345, 346, 348, 349, 352, 353, 355, 356, 361, 363, 365, 367, 368, 370, 371, 372, 375, 376, 377, 378, 380, 381, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399], 250: [0, 1, 2, 3, 4, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 44, 45, 46, 50, 53, 54, 55, 56, 58, 61, 62, 65, 67, 68, 71, 73, 74, 75, 76, 77, 78, 81, 83, 85, 86, 87, 88, 90, 91, 92, 95, 97, 98, 100, 102, 103, 104, 105, 106, 108, 109, 110, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 133, 135, 136, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 167, 169, 170, 175, 176, 178, 182, 183, 184, 185, 187, 188, 189, 190, 192, 195, 196, 198, 199, 201, 202, 204, 206, 208, 209, 210, 211, 213, 214, 215, 219, 221, 222, 223, 225, 226, 227, 232, 233, 234, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 262, 263, 266, 267, 268, 273, 274, 276, 277, 279, 280, 281, 282, 283, 285, 286, 287, 288, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 317, 319, 320, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 336, 337, 342, 344, 345, 346, 348, 349, 352, 353, 355, 356, 358, 361, 363, 365, 367, 368, 370, 371, 372, 375, 376, 377, 378, 380, 381, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399], 259: [0, 1, 2, 3, 4, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 45, 46, 50, 53, 54, 55, 56, 58, 61, 62, 65, 67, 68, 71, 73, 74, 75, 76, 77, 78, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 108, 109, 110, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 131, 133, 135, 136, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 167, 169, 170, 172, 175, 176, 178, 182, 183, 184, 185, 187, 188, 189, 190, 192, 195, 196, 198, 199, 201, 202, 203, 204, 206, 208, 209, 210, 211, 213, 214, 215, 219, 221, 222, 223, 225, 226, 227, 232, 233, 234, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 262, 263, 266, 267, 268, 273, 274, 276, 277, 279, 280, 281, 282, 283, 285, 286, 287, 288, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 317, 319, 320, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 342, 344, 345, 346, 348, 349, 352, 353, 355, 356, 358, 361, 363, 364, 365, 367, 368, 370, 371, 372, 375, 376, 377, 378, 380, 381, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399], 268: [0, 1, 2, 3, 4, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 45, 46, 50, 53, 54, 55, 56, 58, 61, 62, 65, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 108, 109, 110, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 135, 136, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 167, 169, 170, 172, 175, 176, 177, 178, 180, 182, 183, 184, 185, 187, 188, 189, 190, 192, 195, 196, 198, 199, 201, 202, 203, 204, 206, 208, 209, 210, 211, 213, 214, 215, 219, 221, 222, 223, 225, 226, 227, 230, 232, 233, 234, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 262, 263, 266, 267, 268, 273, 274, 276, 277, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 316, 317, 319, 320, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 342, 344, 345, 346, 348, 349, 352, 353, 355, 356, 358, 359, 361, 363, 364, 365, 367, 368, 370, 371, 372, 375, 376, 377, 378, 380, 381, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399], 275: [0, 1, 2, 3, 4, 8, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 45, 46, 50, 53, 54, 55, 56, 58, 61, 62, 64, 65, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 108, 109, 110, 114, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 135, 136, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 167, 169, 170, 172, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 192, 195, 196, 198, 199, 201, 202, 203, 204, 206, 208, 209, 210, 211, 213, 214, 215, 219, 221, 222, 223, 225, 226, 227, 230, 232, 233, 234, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 262, 263, 266, 267, 268, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 342, 344, 345, 346, 348, 349, 352, 353, 355, 356, 358, 359, 361, 363, 364, 365, 366, 367, 368, 370, 371, 372, 375, 376, 377, 378, 380, 381, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399], 277: [0, 1, 2, 3, 4, 8, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 45, 46, 50, 53, 54, 55, 56, 58, 61, 62, 64, 65, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 108, 109, 110, 114, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 167, 169, 170, 172, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 192, 195, 196, 198, 199, 201, 202, 203, 204, 206, 208, 209, 210, 211, 213, 214, 215, 219, 221, 222, 223, 225, 226, 227, 230, 232, 233, 234, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 262, 263, 266, 267, 268, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 342, 344, 345, 346, 348, 349, 352, 353, 355, 356, 358, 359, 361, 363, 364, 365, 366, 367, 368, 370, 371, 372, 375, 376, 377, 378, 380, 381, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399], 286: [0, 1, 2, 3, 4, 8, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 45, 46, 47, 50, 53, 54, 55, 56, 58, 61, 62, 64, 65, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 108, 109, 110, 114, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 167, 169, 170, 172, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 195, 196, 198, 199, 201, 202, 203, 204, 206, 208, 209, 210, 211, 213, 214, 215, 219, 221, 222, 223, 225, 226, 227, 230, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 262, 263, 266, 267, 268, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 342, 344, 345, 346, 348, 349, 352, 353, 355, 356, 358, 359, 361, 363, 364, 365, 366, 367, 368, 370, 371, 372, 375, 376, 377, 378, 380, 381, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399], 295: [0, 1, 2, 3, 4, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 45, 46, 47, 50, 53, 54, 55, 56, 58, 61, 62, 64, 65, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 114, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 167, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 195, 196, 198, 199, 201, 202, 203, 204, 206, 208, 209, 210, 211, 213, 214, 215, 219, 221, 222, 223, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 262, 263, 266, 267, 268, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 342, 344, 345, 346, 348, 349, 352, 353, 355, 356, 358, 359, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 380, 381, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399], 300: [0, 1, 2, 3, 4, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 45, 46, 47, 50, 53, 54, 55, 56, 58, 61, 62, 64, 65, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 167, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 219, 221, 222, 223, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 262, 263, 266, 267, 268, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 342, 344, 345, 346, 348, 349, 352, 353, 355, 356, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 380, 381, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399], 309: [0, 1, 2, 3, 4, 7, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 52, 53, 54, 55, 56, 58, 61, 62, 64, 65, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 167, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 219, 221, 222, 223, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 262, 263, 266, 267, 268, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 342, 344, 345, 346, 348, 349, 352, 353, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 380, 381, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399], 318: [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 52, 53, 54, 55, 56, 58, 61, 62, 64, 65, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 165, 167, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 218, 219, 221, 222, 223, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 266, 267, 268, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 342, 344, 345, 346, 348, 349, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 380, 381, 382, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399], 325: [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 52, 53, 54, 55, 56, 58, 61, 62, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 165, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 218, 219, 221, 222, 223, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 266, 267, 268, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 342, 344, 345, 346, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 380, 381, 382, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399], 327: [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 52, 53, 54, 55, 56, 58, 61, 62, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 165, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 218, 219, 221, 222, 223, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 266, 267, 268, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 380, 381, 382, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399], 336: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 52, 53, 54, 55, 56, 58, 61, 62, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 165, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 266, 267, 268, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 380, 381, 382, 383, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399], 345: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 52, 53, 54, 55, 56, 58, 61, 62, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 165, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 266, 267, 268, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 380, 381, 382, 383, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399]}
    
    seed = 114514
    random.seed(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    torch.cuda.manual_seed(seed)
    torch.cuda.manual_seed_all(seed)
    torch.backends.cudnn.deterministic = True
    torch.backends.cudnn.benchmark = False
    ingestion_times = {}
    for video_number in [100, 150, 200, 250, 300]:
        video_ids = define_video_list[video_number]
        # video_ids = [4, 8, 11, 14, 16, 17, 18, 30, 32, 33, 44, 45, 46, 50, 54, 58, 65, 67, 73, 74, 75, 85, 86, 88, 91, 92]
        
        # Chameleon Skyscraper Video Cluster Method
        alldir = utils.DataPaths(dataset_dir,
                                data_name, data_type, method_name)
        env_camera_config = generate_random_config(
            envconfigpath, envcachepath, device_id, data_name, data_type, objects, method_name, scene_name)
        env_camera = build_a_camera_with_config(
            alldir, env_camera_config, objects, metrics)
        
        time_start = time.time()
        configurations_set = [utils.generate_random_config_vector() for _ in range(skyscraper_config_set_size)]
        skyscraper_context_vectors = []
        ingestion_times[video_number] = []
        for video_id in tqdm(video_ids, desc="Skyscraper Extracting Context Vectors"):
            env_camera.id = video_id
            video_context_vector, ingestion_time = extract_context_vector_by_skyscraper(env_camera,
                                                                        configurations_set)
            ingestion_times[video_number].append(ingestion_time)
            skyscraper_context_vectors.append(video_context_vector)
        time_end = time.time()
        logger.info(f"The cluster time of Skyscraper for {video_number} video streams is: {time_end - time_start}")
        output_file = f"ingestion_times_{video_number}.txt"
        with open(output_file, 'w') as f:
            for idx, time_s in enumerate(ingestion_times[video_number]):
                video_id = video_ids[idx]
                f.write(f"Video ID: {video_id}, Ingestion Time: {time_s}\n")
        # Hippo Video Cluster Method
        time_start = time.time()
        context_reader = pd.read_csv(os.path.join(dataset_dir, data_name, data_type, "context_01.csv"))
        raw_hippo_context_vectors = {}
        for _, row in context_reader.iterrows():
            video_id = int(list(row)[0])
            context_vector = list(row)[1:]
            raw_hippo_context_vectors[video_id] = context_vector
        hippo_context_vectors = []
        for video_id in video_ids:
            hippo_context_vectors.append(raw_hippo_context_vectors[video_id])
        hippo_context_vectors2 = []
        yolo = YOLO('yolov8n.pt')
        tracker_cfg = check_yaml("/home/lzp/go-work/src/videotune/searchMethod/hippo/trackers/cfgs/bytetrack.yaml")
        cfg = IterableSimpleNamespace(**yaml_load(tracker_cfg))
        tracker = BYTETracker(args=cfg, frame_rate=2)
        count=0
        for cid, video_id in enumerate(tqdm(video_ids, desc="Hippo Extracting Context Vectors")):
            hippo_video_context_vector = []
            video_path = os.path.join(dataset_dir, data_name, data_type, "video", f"{video_id}.mp4")
            # Extract the first 8 frames of the video at intervals of 32 frames.
            frames = utils.extract_frames(video_path, 8, 32)
            # Video Clarity / Brightness / Saturation extracted by OpenCV
            clarity_list, brightness_list, saturation_list = [], [], []
            object_sizes, object_numbers = [], []
            speed_list, acceleration_list = [], []
            if(count == 2):
                break
            st_time = time.time()
            count = count+1
            for frame in frames:
                s_time = time.time()
                hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

                brightness = np.mean(hsv[:, :, 2])
                saturation = np.mean(hsv[:, :, 1])

                gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                laplacian_var = cv2.Laplacian(gray, cv2.CV_64F).var()
                print(f"opencv:{time.time()-s_time}")
                
                clarity_list.append(laplacian_var)
                brightness_list.append(brightness)
                saturation_list.append(saturation)
                s_time = time.time()
                results = yolo(frame, conf=0.1, verbose=False, classes=[2,5,7])[0].boxes.cpu().numpy()
                print(f"yolo:{time.time()-s_time}")
                object_numbers.append(len(results.xywh))
                for result in results.xywh:
                    object_sizes.append((result[2] * result[3])**0.5)
                s_time = time.time()  
                track_results = tracker.update(results)
                print(f"bytetrack:{time.time()-s_time}")
                for trk in track_results:
                    if len(trk.speeds) > 0:
                        speed_list.append(trk.speeds[-1])
                    if len(trk.accelerations) > 0:
                        acceleration_list.append(trk.accelerations[-1])
            print(time.time()-st_time)
            clarity, brightness, saturation = float(np.mean(clarity_list)), \
                float(np.mean(brightness_list)), \
                float(np.mean(saturation_list))

            object_sizes = np.array(object_sizes)
            object_numbers = np.array(object_numbers)
            
            not_nan_mask = ~np.isnan(object_sizes)
            object_sizes = object_sizes[not_nan_mask]
            
            if len(object_sizes) == 0:
                object_size = 0.0
                object_number = 0.0
            else:
                object_size = np.mean(object_sizes)
                object_number = np.mean(object_numbers)

            hippo_video_context_vector.append(clarity)
            hippo_video_context_vector.append(brightness)
            hippo_video_context_vector.append(saturation)
            
            hippo_video_context_vector.append(object_size)
            hippo_video_context_vector.append(object_number)
            hippo_context_vectors2.append(hippo_video_context_vector)
        time_end = time.time()
        logger.info(f"The cluster time of Hippo for {video_number} video streams is: {time_end - time_start}")
        
        skyscraper_context_vectors = np.array(skyscraper_context_vectors)
        hippo_context_vectors = np.array(hippo_context_vectors)
        hippo_context_vectors2 = np.array(hippo_context_vectors2)
        # normalize the mean of context vectors to 0, std to 1
        hippo_context_vectors2 = (hippo_context_vectors2 - np.mean(hippo_context_vectors2, axis=0)) / (np.std(hippo_context_vectors2, axis=0) + 1e-6)
        # Splice hippo_context_vectors2 to the back of hippo_context_vectors
        hippo_context_vectors = np.concatenate((hippo_context_vectors, hippo_context_vectors2), axis=1)
        
        # normalize the context vectors
        skyscraper_context_vectors = skyscraper_context_vectors / np.linalg.norm(skyscraper_context_vectors, axis=1, keepdims=True)
        hippo_context_vectors = hippo_context_vectors / np.linalg.norm(hippo_context_vectors, axis=1, keepdims=True)
        
        save_skyscraper_context_vectors_path = os.path.join(save_context_vectors_dir, f"skyscraper_context_vectors_{video_number}.npy")
        save_hippo_context_vectors_path = os.path.join(save_context_vectors_dir, f"hippo_context_vectors_{video_number}.npy")
        np.save(save_skyscraper_context_vectors_path, skyscraper_context_vectors)
        np.save(save_hippo_context_vectors_path, hippo_context_vectors)
        
        skyscraper_accuracy, hippo_accuracy = [], []
        for i in tqdm(list(range(len(video_ids))), desc="Evaluating the cluster accuracy of Skyscraper and Hippo"):
            video_id = video_ids[i]
            anchor_video_id = video_id
            remove_video_ids = video_ids.copy()
            remove_video_ids.remove(video_id)
            random_video_1, random_video_2 = random.sample(remove_video_ids, 2)
            random_video_idx_1, random_video_idx_2 = video_ids.index(random_video_1), video_ids.index(random_video_2)
            
            skyscraper_anchor_video_context_vector = skyscraper_context_vectors[i]
            skyscraper_random_video_1_context_vector = skyscraper_context_vectors[random_video_idx_1]
            skyscraper_random_video_2_context_vector = skyscraper_context_vectors[random_video_idx_2]
            
            if calculate_context_distance(skyscraper_anchor_video_context_vector, skyscraper_random_video_1_context_vector) < \
                calculate_context_distance(skyscraper_anchor_video_context_vector, skyscraper_random_video_2_context_vector):
                positive_video_id = random_video_1
                negative_video_id = random_video_2
            else:
                positive_video_id = random_video_2
                negative_video_id = random_video_1
            
            anchor_pareto_set = collocate_pareto_set(anchor_video_id)
            # eval accuracy and latency for positive video and negative video with anchor video pareto set
            skyscraper_pos_distance, skyscraper_neg_distance = 0.0, 0.0
            for acc, lat, config in anchor_pareto_set:
                env_camera.id = positive_video_id
                # env_camera.
                env_camera.updateConfig(utils.generate_config(config, env_camera.loadConfig()))
                _, motvalue, _, _, _, \
                                cmetric, _ = env_camera.ingestion_without_cache
                skyscraper_acc, skyscraper_lat = motvalue, cmetric[-1]
                skyscraper_pos_distance += (acc - skyscraper_acc)**2 + (lat - skyscraper_lat)**2
                
                env_camera.id = negative_video_id
                env_camera.updateConfig(utils.generate_config(config, env_camera.loadConfig()))
                _, motvalue, _, _, _, \
                                cmetric, _ = env_camera.ingestion_without_cache
                skyscraper_acc, skyscraper_lat = motvalue, cmetric[-1]
                skyscraper_neg_distance += (acc - skyscraper_acc)**2 + (lat - skyscraper_lat)**2
            if skyscraper_pos_distance < skyscraper_neg_distance:
                skyscraper_accuracy.append(1.0)
            else:
                skyscraper_accuracy.append(0.0)
                
            hippo_anchor_video_context_vector = hippo_context_vectors[i]
            hippo_random_video_1_context_vector = hippo_context_vectors[random_video_idx_1]
            hippo_random_video_2_context_vector = hippo_context_vectors[random_video_idx_2]
            
            if calculate_context_distance(hippo_anchor_video_context_vector, hippo_random_video_1_context_vector) < \
                calculate_context_distance(hippo_anchor_video_context_vector, hippo_random_video_2_context_vector):
                positive_video_id = random_video_1
                negative_video_id = random_video_2
            else:
                positive_video_id = random_video_2
                negative_video_id = random_video_1
            
            anchor_pareto_set = collocate_pareto_set(anchor_video_id)
            # eval accuracy and latency for positive video and negative video with anchor video pareto set
            hippo_pos_distance, hippo_neg_distance = 0.0, 0.0
            for acc, lat, config in anchor_pareto_set:
                env_camera.id = positive_video_id
                # env_camera.
                env_camera.updateConfig(utils.generate_config(config, env_camera.loadConfig()))
                _, motvalue, _, _, _, \
                                cmetric, _ = env_camera.ingestion_without_cache
                hippo_acc, hippo_lat = motvalue, cmetric[-1]
                hippo_pos_distance += (acc - hippo_acc)**2 + (lat - hippo_lat)**2
                
                env_camera.id = negative_video_id
                env_camera.updateConfig(utils.generate_config(config, env_camera.loadConfig()))
                _, motvalue, _, _, _, \
                                cmetric, _ = env_camera.ingestion_without_cache
                hippo_acc, hippo_lat = motvalue, cmetric[-1]
                hippo_neg_distance += (acc - hippo_acc)**2 + (lat - hippo_lat)**2
            if hippo_pos_distance < hippo_neg_distance:
                hippo_accuracy.append(1.0)
            else:
                hippo_accuracy.append(0.0)

        logger.info(f"The accuracy of Skyscraper is: {np.mean(skyscraper_accuracy)}")
        logger.info(f"The accuracy of Hippo is: {np.mean(hippo_accuracy)}")